import traceback
import sys
from twisted.application import service
from opencanary.config import config
from opencanary.logger import getLogger
from pkg_resources import iter_entry_points

MODULES = [
    "Telnet", "CanaryHTTP", "CanaryFTP", "CanarySSH", "HTTPProxy",
    "CanaryMySQL", "MSSQL", "CanaryVNC", "CanaryTftp", "CanaryNtp",
    "CanarySIP", "CanaryGit", "CanaryTCPBanner", "CanaryRedis"
]

if config.moduleEnabled('rdp'):
    try:
        from opencanary.modules.rdp import CanaryRDP
        MODULES.append("CanaryRDP")
    except ImportError:
        print("Can't import RDP. Please ensure you have RDP installed.", file=sys.stderr)

if config.moduleEnabled('snmp'):
    try:
        from opencanary.modules.snmp import CanarySNMP
        MODULES.append("CanarySNMP")
    except ImportError:
        print("Can't import SNMP. Please ensure you have Scapy installed.", file=sys.stderr)

# Import modules depending on Linux-specific platform
if sys.platform.startswith("linux"):
    from opencanary.modules.samba import CanarySamba
    from opencanary.modules.portscan import CanaryPortscan
    MODULES.extend(["CanarySamba", "CanaryPortscan"])

logger = getLogger(config)

def instantiate_module(klass, application):
    try:
        obj = klass(config=config, logger=logger)
        if hasattr(obj, 'startYourEngines'):
            obj.startYourEngines()
            log_message = f"Ran startYourEngines on class {klass.__name__} in {klass.__module__}"
        elif hasattr(obj, 'getService'):
            services = obj.getService()
            if not isinstance(services, list):
                services = [services]
            for service in services:
                service.setServiceParent(application)
            log_message = f"Added service from class {klass.__name__} in {klass.__module__} to fake"
        else:
            log_message = f"The class {klass.__name__} in {klass.__module__} does not have any required starting method."
        logMsg({'logdata': log_message})
    except Exception as e:
        err = f"Failed to instantiate instance of class {klass.__name__} in {klass.__module__}. {traceback.format_exc()}"
        logMsg({'logdata': err})

def logMsg(msg):
    data = {'logdata': {'msg': msg}}
    logger.log(data, retry=False)

def main():
    application = service.Application("opencanaryd")
    start_modules = []

    # Add all custom modules
    # (Permanently enabled as they don't officially use settings yet)
    for ep in iter_entry_points("canary.usermodule"):
        try:
            klass = ep.load(require=False)
            start_modules.append(klass)
        except Exception as e:
            err = f"Failed to load class from the entrypoint: {str(ep)}. {traceback.format_exc()}"
            logMsg({'logdata': err})

    # Add only enabled modules
    enabled_modules = filter(lambda m: config.moduleEnabled(m.NAME), MODULES)
    start_modules.extend(enabled_modules)

    for klass_name in start_modules:
        klass = globals().get(klass_name)
        if klass:
            instantiate_module(klass, application)

    msg = 'Canary running!!!'
    logMsg(msg)

if __name__ == "__main__":
    main()
